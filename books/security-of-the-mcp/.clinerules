# MCP Security Book プロジェクトルール

## プロジェクト固有のパターン

### 1. ドキュメント構造
- 各チャプターは独立して理解可能であること
- 前のチャプターの内容を次のチャプターで発展させる構造
- 理論と実践のバランスを保つ

### 2. コンテンツスタイル
- 技術的に正確であること
- 初心者にも理解しやすい説明を心がける
- 図表を効果的に活用する
- コードサンプルには十分な説明を付ける

### 3. セキュリティ情報の取り扱い
- 脆弱性情報は責任ある形で開示する
- 攻撃手法の説明には必ず対策も含める
- センシティブな情報の取り扱いに注意する

## ユーザー（著者）の好み

### 1. 文書スタイル
- 簡潔で明確な文章
- 技術用語は初出時に説明を付ける
- 箇条書きを効果的に活用する
- 長すぎる段落は避ける

### 2. コードスタイル
- 読みやすさを重視したコード
- 十分なコメントを付ける
- セキュリティベストプラクティスに従う
- 実行可能なサンプルコードを提供する

### 3. 図表スタイル
- Mermaid記法を使用したダイアグラム
- 視覚的に分かりやすい図表
- 色は控えめに使用する
- 図表には必ず説明を付ける

## プロジェクト固有の知識

### 1. MCPの基本概念
- MCPはAIモデルとデータソース・ツールを接続するための標準化されたオープンプロトコル
- クライアント-サーバーアーキテクチャを採用
- ツール、リソース、プロンプトが主要コンポーネント

### 2. セキュリティ関連の知識
- プロンプトインジェクション
- ツールポイズニング
- 過剰な権限
- ラグプル攻撃
- ツールシャドーイング
- 間接的なプロンプトインジェクション
- トークン窃取
- 悪意のあるコード実行
- リモートアクセス制御

### 3. 書籍の構成(検討中)
- Chapter 1: MCPとは何か
- Chapter 2: セキュリティリスク
- Chapter 3: 攻撃手法と対策
- Chapter 4: セキュリティベストプラクティス
- Chapter 5: 実装ガイドライン
- Chapter 6: ケーススタディ

## 重要な実装パス

### 1. セキュリティ対策の実装
- 入力検証と無害化
- 最小権限の原則
- コード実行のサンドボックス化
- ツール説明の検証
- 適切な認証と認可
- 認証トークンの安全な保存
- MCPインタラクションの監視とログ記録
- 定期的なセキュリティ監査
- 最新のセキュリティパッチの適用
- 開発者教育

### 2. ドキュメント作成フロー
1. アウトラインの作成
2. 内容の詳細化
3. 図表の追加
4. コードサンプルの作成
5. レビューと改善
6. 最終校正

## 既知の課題と解決策

### 1. MCPの発展途上の性質
- **課題**: 仕様が変更される可能性がある
- **解決策**: 基本原則に焦点を当て、実装詳細は抽象化する

### 2. セキュリティ情報の詳細度
- **課題**: 詳細すぎると悪用される恐れ、抽象的すぎると役に立たない
- **解決策**: 責任ある開示の原則に従い、対策と合わせて説明する

### 3. 読者の技術レベルの多様性
- **課題**: 初心者から専門家まで幅広い読者への対応
- **解決策**: 基本から応用へと段階的に説明し、補足情報を提供する

## ツール使用パターン

### 1. ドキュメント作成
- Markdown形式での執筆
- Mermaid記法によるダイアグラム作成
- Zennプラットフォームでの公開

### 2. コード管理
- GitHubでのバージョン管理
- サンプルコードのリポジトリ管理
- コードレビューの実施

### 3. セキュリティテスト
- 静的解析ツールの活用
- ペネトレーションテストの実施
- セキュリティレビューの定期的な実施
